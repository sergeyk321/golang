package main

import (
	"fmt"
	"math"
	"math/rand"
)

func main() {
	var m, n int               //m - колво строк, n - колво столбцов
	fmt.Scan(&m, &n)           //ввод данных с клавиатуры
	matrix := make([][]int, m) //создаем матрицу
	for i := 0; i < m; i++ {   //заполняем матрицу, заходим в каждую строку
		matrix[i] = make([]int, n) //каждая строка - подмассив длины n
		for j := 0; j < n; j++ {   //проходим по каждому элементу
			matrix[i][j] = rand.Intn(10) //случайное число в пределах 10
		}
	}
	fmt.Println("Исходная матрица:") //выводим исходную матрицу
	for i := 0; i < m; i++ {         //проходим по каждой строке
		for j := 0; j < n; j++ { //проходим по каждому элементу
			fmt.Printf("%d\t", matrix[i][j]) //печатаем каждый элемент
		}
		fmt.Println() //переход к следующей строке матрицы
	}
	//сортировка
	for i := 0; i < m; i++ {
		for j := i + 1; j < m; j++ {
			//вычисляем среднее геометрическое для текущей и следующей строки
			srSqrt1, srSqrt2 := 1.0, 1.0
			for k := 0; k < n; k++ {
				srSqrt1 *= float64(matrix[i][k]) //перемножаем значения между собой
				srSqrt2 *= float64(matrix[j][k])
			}
			avg1 := math.Pow(srSqrt1, 1.0/float64(n)) //среднее геометрическое = корень n-ой степени из умноженных значений. n - колво чисел
			avg2 := math.Pow(srSqrt2, 1.0/float64(n))

			if avg1 < avg2 { //если среднее геометрическое текущей строки меньше, чем следующей, то меняем их местами, чтобы
				//строка с наибольшим средним геометрическим стояла выше
				for k := 0; k < n; k++ {
					matrix[i][k], matrix[j][k] = matrix[j][k], matrix[i][k] //каждый элемент по очереди меняем с элементом на другой строке
					//например, сначала [0, 0] и [1, 0] , потом [0, 1] и [1, 1], потом [0, 2] и [1, 2]
				}
			}
		}
	}
	fmt.Println("Отсортированная матрица:") //выводим отсортированную матрицу
	for i := 0; i < m; i++ {                //проходим по каждой строке
		for j := 0; j < n; j++ { //проходим по каждому элементу
			fmt.Printf("%d\t", matrix[i][j]) //печатаем каждый элемент
		}
		fmt.Println() //переход к следующей строке матрицы
	}
}
